@page "/svg"
@using ABSolutions.SvgAssetCollector.BlazorComponent

@if (_doRender)
{
    <h1>Inline SVGs</h1>
    <p>Here are some SVGs embedded into this page.</p>
    <span class="@(_isCancelled ? "svg-error" : "svg-blue")">
        <!-- using default ARIA attributes -->
        <SvgAssetCollector
            Filename="IAmBlue.svg"
            UseCache="false"
            LogCorrelationValue="@_logCorrelationValue"
            CancellationToken="CancellationToken"/>
    </span>
    <span class="@(_isCancelled ? "svg-error" : "svg-red")">
        <SvgAssetCollector
            Filename="IAmRed.svg"
            AriaHidden="false"
            AriaLabel="This is red"
            Role="img"
            LogCorrelationValue="@_logCorrelationValue"
            CancellationToken="CancellationToken"/>
    </span>
    <span class="svg-error">
        <p>
            The SVG requested below does NOT exist, so the default image is used.
        </p>
        <SvgAssetCollector
            Filename="NoExist.svg"
            Role="img"
            Attributes="_svgAttributesForError"
            LogCorrelationValue="@_logCorrelationValue"
            CancellationToken="CancellationToken"/>
    </span>
}

<style>
    .svg-blue rect {
        color: blue;
    }

    .svg-blue path {
        color: white;
    }

    .svg-red rect {
        color: red;
    }

    .svg-red path {
        color: white;
    }

    .svg-error p {
        margin-top: 2em;
        margin-bottom: 0.5em;
    }

    .svg-error svg {
        color: black;
        width: 200px;
        height: 200px;
    }

</style>

@code {
    private bool _doRender;
    private bool _isCancelled;
    private string _logCorrelationValue = string.Empty;
    private readonly CancellationTokenSource _cts = new();
    private CancellationToken CancellationToken => _cts.Token;

    private readonly Dictionary<string, string> _svgAttributesForError = new()
    {
        {"width", "200"},
        {"height", "200"}
    };

    protected override async Task OnInitializedAsync()
    {
        _logCorrelationValue = Guid.NewGuid().ToString();

        // randomly cancel SVG retrieval 50% of the time to demonstrate
        // cancellation token operation
        var random = new Random();
        if (random.Next(1, 100) % 2 == 0)
        {
            await _cts.CancelAsync();
            _isCancelled = true;
            Console
                .WriteLine("SVG retrieval cancelled via random number generator.");
        }

        await Task.CompletedTask;
        _doRender = true;
    }

}